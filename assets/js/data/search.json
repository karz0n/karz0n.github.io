[ { "title": "DeepSpeech: Train own model", "url": "/posts/deepspeech-train-own-model/", "categories": "Engineering, ASR", "tags": "asr, vosk", "date": "2020-10-25 00:00:00 +0300", "snippet": "PreparePrepare datasetsCreate directories:$ mkdir -p ~/temp/asr/{train,dev,test,export,tools}$ cd ~/temp/asr$ export ASR=$PWDPurpose of each directory: train - for train dataset; dev - for dev dataset; test - for test dataset; export - for outcome artifacts (model, scorer, vocabulary, checkpo..." }, { "title": "VOSK: Test Drive", "url": "/posts/vosk-asr-testdrive/", "categories": "Engineering, ASR", "tags": "asr, vosk", "date": "2020-10-25 00:00:00 +0300", "snippet": "Test drive will performed inside Ubuntu 18.04 docker container:$ docker run \\--name ubuntu \\--interactive \\--tty \\--user root:root \\--network=bridge \\ubuntu:18.04 /bin/bashFirst we need install VOSK and all prerequisites for it.General dependencies:$ apt update$ apt install -y build-essential git..." }, { "title": "DeepSpeech: Test Drive", "url": "/posts/deepspeech-testdrive/", "categories": "Engineering, ASR", "tags": "asr, deepspeech", "date": "2020-10-25 00:00:00 +0300", "snippet": "Test drive will performed inside Ubuntu 18.04 docker container:$ docker run \\--name ubuntu \\--interactive \\--tty \\--user root:root \\--network=bridge \\ubuntu:18.04 /bin/bashFirst we need install DeepSpeech.General dependencies:$ apt update$ apt install -y wget python3 pytho3-pipInstall DeepSpeech:..." }, { "title": "Setup network-wide ad-blocker based on RaspberryPi", "url": "/posts/setup-network-wide-adblocker/", "categories": "Engineering, RaspberryPi", "tags": "rpi, linux", "date": "2020-09-06 00:00:00 +0300", "snippet": " Visit side and download Imager tools; Install Imager tool: $ sudo apt install ./imager_&amp;lt;version&amp;gt;_amd64.deb Run tool and write any RaspberryPi OS to the SD card; Plug-in SD card to RaspberryPi and log-in to the device; Configure device by raspi-config tool and restart;..." }, { "title": "Set-Up Boost library", "url": "/posts/setup-boost/", "categories": "Development, Bootstrap", "tags": "boost, cmake", "date": "2020-09-06 00:00:00 +0300", "snippet": " Download and unpack: $ wget https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.tar.gz$ tar -xf boost_1_74_0.tar.gz &amp;amp;&amp;amp; rm boost_1_74_0.tar.gz$ cd boost_1_74_0 Build and install.With specific place: $ ./bootstrap.sh --prefix=${HOME}/opt/boost$ ./b2 ins..." }, { "title": "Configure locale on Raspberry Pi OS", "url": "/posts/configure-locale-on-rpi/", "categories": "Engineering, RaspberryPi", "tags": "rpi, linux", "date": "2020-09-06 00:00:00 +0300", "snippet": " Update locale: $ sudo raspi-config # Choose: 4 Localisation Options =&amp;gt; I1 Change Locale$ sudo update-locale \\LANGUAGE=en_US.UTF-8 \\LANG=en_US.UTF-8 \\LC_TYPE=en_US.UTF-8 \\LC_ALL=en_US.UTF-8 Reboot device; Generate locale: $ sudo locale-gen en_US.UTF-8$ export LANGUAGE=en_US...." }, { "title": "Patterns: Prototype", "url": "/posts/patterns-prototype/", "categories": "Development, C++", "tags": "cpp, patterns", "date": "2020-09-06 00:00:00 +0300", "snippet": "PurposeSpecifies the types of objects to create using a prototype instance and creates new objects by copying this prototype.StructureParticipants Prototype - prototype: declares an interface for cloning itself. ConcretePrototype - concrete prototype: implement operation..." }, { "title": "Patterns: Factory Method", "url": "/posts/patterns-factory-method/", "categories": "Development, C++", "tags": "cpp, patterns", "date": "2020-09-06 00:00:00 +0300", "snippet": "PurposeDefines the interface for creating an object, but leaves the subclasses to decide which class to instantiate. A factory method allows a class to delegate instantiation to subclasses.StructureParticipants Product - product: defines the interface of objects created by the factory m..." }, { "title": "Install Apache Web Server with HTTPS support", "url": "/posts/install-apache-with-https-support/", "categories": "Engineering, Linux", "tags": "apache, https, web-server", "date": "2020-09-05 00:00:00 +0300", "snippet": "Initial: OS version – CentOS Linux release 7.4.1708 (Core) Core version – Linux 3.10.0-693.17.1.el7.x86_64Step 1 – Install prerequests$ sudo yum install epel-release$ sudo yum install httpd mod_ssl python-certbot-apacheStep 2 – Configure Apache serverRun httpd daemon:$ sudo systemctl start http..." }, { "title": "Build and run ARM docker container on x86", "url": "/posts/build-and-run-arm-docker-container-on-x86/", "categories": "Engineering, Docker", "tags": "docker, arm, x86", "date": "2020-09-05 00:00:00 +0300", "snippet": "PrerequisitesInstall QEMU:$ sudo apt update$ sudo apt install -y qemu qemu-user-static qemu-user binfmt-supportRegister QEMU in the build agent:$ docker run --rm --privileged multiarch/qemu-user-static:register --resetBuild$ mkdir -p base/aarch64v8$ cd base/aarch64v8$ cp /usr/bin/qemu-aarch64-sta..." }, { "title": "Provide RDP on Linux machine", "url": "/posts/provide-rdp-on-linux/", "categories": "Engineering, Linux", "tags": "rdp", "date": "2020-09-05 00:00:00 +0300", "snippet": "By NoMachine (preferable) From site download server and client; Install server and client; Connect to machine using client; Enjoy.By X2GoInstall SSH server:$ sudo apt -y install openssh-server$ sudo ufw allow 22Install MATE Desktop:$ sudo apt -y update$ sudo apt -y install mate-desktop-enviro..." }, { "title": "Patterns: Singleton", "url": "/posts/patterns-singleton/", "categories": "Development, C++", "tags": "cpp, patterns", "date": "2020-09-05 00:00:00 +0300", "snippet": "PurposeEnsures that a class has only one instance and provides a global access point to it.StructureParticipants Singleton - singleton: defines a getInstance operation, that allows clients to access a single instance; may be responsible for creating own unique instance. Exampl..." }, { "title": "Patterns: Builder", "url": "/posts/patterns-builder/", "categories": "Development, C++", "tags": "cpp, patterns", "date": "2020-09-05 00:00:00 +0300", "snippet": "PurposeSeparates the construction of a complex object from its views, so that different representations can result by the same construction process (sequence).StructureParticipants Builder - builder: set abstraction interface for creating object Product by parts. ConcreateBuilder..." }, { "title": "Install PlantUML", "url": "/posts/install-plantuml/", "categories": "Development, General", "tags": "plantuml", "date": "2020-09-05 00:00:00 +0300", "snippet": "InstallInstall prerequisites:$ sudo apt install -y curl graphviz default-jreInstall PlantUML binary:$ sudo mkdir -p /opt/plantuml$ cd /opt/plantuml$ UML=http://sourceforge.net/projects/plantuml/files/plantuml.jar/download$ sudo curl -JLO ${UML}Create runner script:$ cat &amp;lt;&amp;lt;EOF | sudo..." }, { "title": "Install ccache", "url": "/posts/install-ccache/", "categories": "Development, Tools", "tags": "cpp, ccache", "date": "2020-09-05 00:00:00 +0300", "snippet": "Install$ sudo apt install -y ccache$ sudo /usr/sbin/update-ccache-symlinks$ echo &#39;export PATH=&quot;/usr/lib/ccache:$PATH&quot;&#39; | tee -a ~/.bashrc$ source ~/.bashrcYour path should looks like:/usr/lib/ccache:...ConfigureTo enable unlimited cache size:$ ccache -F 0$ ccache -M 0To show cac..." }, { "title": "Dynamic Libraries", "url": "/posts/dynamic-libraries/", "categories": "Development, General", "tags": "libs, linker, rpath, runpath, ld", "date": "2020-09-05 00:00:00 +0300", "snippet": "AnatomyLibraries in Linux static shared dynamic linking dynamic loading Static libraries contains functionality that is bound to a program statically at compile time.Shared libraries are loaded when an application is loaded and binding occurs at run time. They can used in a c..." }, { "title": "Compilation In Details", "url": "/posts/compilation-in-details/", "categories": "Development, C++", "tags": "cpp, preprocess, linker, compile", "date": "2020-05-28 00:00:00 +0300", "snippet": "Overviewgraph LR IN[/code.cpp/]==&amp;gt;PRE[[Preprocess]]--&amp;gt;|code.ii|CMP[[Compile]]--&amp;gt;|code.s|ASM[[Assemble]]--&amp;gt;|code.o|LNK[[Link]]==&amp;gt;OUT[/code.out/]Stages: Preprocess; Compile; Assemble; Link.$ g++ -O2 main.cpp -o main --verbose# Run compiler (preprocess + com..." }, { "title": "CMake: Integrate clang-format tool", "url": "/posts/cmake-integrate-clangformat/", "categories": "Development, CMake", "tags": "cmake, clang-format", "date": "2020-05-15 00:00:00 +0300", "snippet": "PrerequisitesInstall ClangFormat in the system:$ sudo apt install -y clang-format-9We choose the last version of clang-format to install.IntegrateDownload and place FindClangFormat.cmake and CodeFormat.cmake module files at the project.Important: Don’t forget to include dir there you place these ..." }, { "title": "CMake: Integrate cppcheck tool", "url": "/posts/cmake-integrate-cppcheck/", "categories": "Development, CMake", "tags": "cmake, cppcheck", "date": "2020-05-14 00:00:00 +0300", "snippet": "PrerequisitesInstall cppcheck in the system:$ sudo apt install cppcheckIntegrateDownload and place FindCppCheck.cmake and CodeAnalysis.cmake module files at the project.Important: Don’t forget to include dir there you place these module files to CMAKE_MODULE_PATH. As example:list(APPEND CMAKE_MOD..." }, { "title": "How to build and use GoogleTest library", "url": "/posts/how-to-build-and-use-googletest-library/", "categories": "Development, Bootstrap", "tags": "gtest, gmock", "date": "2020-04-27 00:00:00 +0300", "snippet": "CloneOpen terminal and run this command:$ git clone git@github.com:google/googletest.gitBuildOpen terminal from source directory and run these commands:$ cd googletest$ cmake -S . -B build \\-DCMAKE_CXX_STANDARD=17 \\-DCMAKE_INSTALL_PREFIX=~/opt/googletest$ cmake --build build --parallel --target i..." }, { "title": "Useful Linux commands", "url": "/posts/useful-linux-commands/", "categories": "Engineering, Linux", "tags": "linux", "date": "2020-04-07 00:00:00 +0300", "snippet": "Useful Linux commandsGeneralWhat command is?which - shows the first command found in PATH variable$ which awk/usr/bin/awk$ which -a awk/usr/bin/awk/bin/awk/usr/bin/X11/awkwhereis - shows more details information about command (can search man pages)$ whereis awkawk: /bin/awk /usr/bin/awk /usr/lib6..." }, { "title": "Git cheat sheet", "url": "/posts/git-cheat-sheet/", "categories": "Development, CVS", "tags": "git", "date": "2020-04-07 00:00:00 +0300", "snippet": "ConfigureGenerate SSH key:$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;&amp;gt; ...$ eval &quot;$(ssh-agent -s)&quot;&amp;gt; Agent pid ....$ ssh-add ~/.ssh/id_rsa...Configure username/email (global):$ git config --global user.name &quot;FirstName LastName&quot;$ git config --..." }, { "title": "My cmake cookbook", "url": "/posts/cmake-cookbook/", "categories": "Development, CMake", "tags": "cmake, cpp11", "date": "2020-03-05 00:00:00 +0200", "snippet": "[R01] - Activate C++11 standard in cmakeProject specific configuration of C++ standard, works for all targets that will be defined.set(CMAKE_CXX_STANDARD 11)set(CMAKE_CXX_STANDARD_REQUIRED ON)set(CMAKE_CXX_EXTENSIONS OFF)Target specific configration:set_target_properties(myTarget PROPERTIES CX..." }, { "title": "Yocto cheat sheet", "url": "/posts/yocto-cheat-sheet/", "categories": "Engineering, Yocto", "tags": "yocto, bitbake", "date": "2020-03-01 00:00:00 +0200", "snippet": "YoctoCheck if certain package is present on current setup:bitbake -s | grep &amp;lt;package&amp;gt;Show possible image to bake:$ bitbake-layers show-recipes &quot;*-image-*&quot;Show possible layers:$ bitbake-layers show-layersImageGet complete list of packages that will be built for given image:..." }, { "title": "How to check for memory leak", "url": "/posts/how-to-check-for-memory-leak/", "categories": "Development, General", "tags": "memory, valgrind", "date": "2020-03-01 00:00:00 +0200", "snippet": "To check for memory leak we will use valgrind tools.First we need to compile and install it:$ wget https://sourceware.org/pub/valgrind/valgrind-3.16.1.tar.bz2$ tar -xf valgrind-3.16.1.tar.bz2 &amp;amp;&amp;amp; rm valgrind-3.16.1.tar.bz2$ cd valgrind-3.16.1$ ./configure$ make -j$(nproc)$ sudo mak..." }, { "title": "Bake yocto linux for RaspberryPi 3", "url": "/posts/bake-yocto-linux-for-rpi3/", "categories": "Engineering, Yocto", "tags": "yocto, linux, raspberrypi3", "date": "2020-03-01 00:00:00 +0200", "snippet": "Useful LinksQuick buildInstall dependencies$ sudo apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib \\ build-essential chrpath socat cpio python python3 python3-pip python3-pexpect \\ xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev ..." }, { "title": "Manage systemd on Linux system", "url": "/posts/manage-systemd-services/", "categories": "Engineering, Linux", "tags": "systemd, linux", "date": "2020-02-28 00:00:00 +0200", "snippet": "View unitsTo view all available unit files:$ systemctl list-unit-filesTo view only service unit files:$ systemctl list-unit-files --type=serviceTo list all all running units:$ systemctl list-unitsTo list failed units:systemctl –failedManage servicesTo get status:$ systemctl start name.serviceTo s..." }, { "title": "Install C++ development environment on Ubuntu", "url": "/posts/install-cpp-development-environment/", "categories": "Development, Configure", "tags": "gcc, ubuntu", "date": "2019-10-05 00:00:00 +0300", "snippet": "Installing development environment$ sudo apt update$ sudo apt install -y build-essentialCheck version:$ gcc --versionOutput:gcc (Ubuntu 9.3.0-10ubuntu2) 9.3.0Copyright (C) 2019 Free Software Foundation, Inc.This is free software; see the source for copying conditions. There is NOwarranty; not ev..." }, { "title": "Install and use Docker on Ubuntu", "url": "/posts/install-and-use-docker/", "categories": "Engineering, Docker", "tags": "ubuntu, docker", "date": "2019-10-05 00:00:00 +0300", "snippet": "Install$ curl -fsSL https://get.docker.com -o get-docker.sh$ sudo sh get-docker.shIn case of any problems please follow official instruction.Post-Install$ sudo groupadd docker$ sudo usermod -aG docker ${USER}$ su - ${USER}$ id -nGLog out and log back in so that your group membership is re-evaluat..." }, { "title": "Install Jekyll with third-party plugins support", "url": "/posts/install-jekyll-with-third-party-plugins-support/", "categories": "Blogging, Jekyll", "tags": "plantuml", "date": "2019-05-03 00:00:00 +0300", "snippet": "Install dependenciesInstall PlantUML$ sudo apt install -y graphviz plantuml$ plantuml -testdotYou should see something like that:The environment variable GRAPHVIZ_DOT has not been setDot executable is /usr/bin/dotDot version: dot - graphviz version 2.38.0 (20140413.2041)Installation seems OK. Fil..." }, { "title": "Install Jekyll with PlantUML support and TravisCI build", "url": "/posts/install-jekyll-with-plantuml-support-and-travisci-build/", "categories": "Blogging, Jekyll", "tags": "plantuml, travisci", "date": "2019-05-03 00:00:00 +0300", "snippet": "Install dependenciesInstall PlantUML$ sudo apt install -y graphviz plantuml$ plantuml -testdotYou should see something like that:The environment variable GRAPHVIZ_DOT has not been setDot executable is /usr/bin/dotDot version: dot - graphviz version 2.38.0 (20140413.2041)Installation seems OK. Fil..." } ]
