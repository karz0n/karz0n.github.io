<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://karz0n.github.io/</id><title>ZEON</title><subtitle></subtitle> <updated>2021-02-21T15:45:14+02:00</updated> <author> <name>Denys Asauliak</name> <uri>https://karz0n.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://karz0n.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://karz0n.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> Â© 2021 Denys Asauliak </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>DeepSpeech: Train own model</title><link href="https://karz0n.github.io/posts/deepspeech-train-own-model/" rel="alternate" type="text/html" title="DeepSpeech: Train own model" /><published>2020-10-25T00:00:00+03:00</published> <updated>2020-10-25T00:00:00+03:00</updated> <id>https://karz0n.github.io/posts/deepspeech-train-own-model/</id> <content src="https://karz0n.github.io/posts/deepspeech-train-own-model/" /> <author> <name>Denys Asauliak</name> </author> <category term="Engineering" /> <category term="ASR" /> <summary> Prepare Prepare datasets Create directories: $ mkdir -p ~/temp/asr/{train,dev,test,export,tools} $ cd ~/temp/asr $ export ASR=$PWD Purpose of each directory: train - for train dataset; dev - for dev dataset; test - for test dataset; export - for outcome artifacts (model, scorer, vocabulary, checkpoints); tools - for deep speech source code and native client. We will teach our... </summary> </entry> <entry><title>VOSK: Test Drive</title><link href="https://karz0n.github.io/posts/vosk-asr-testdrive/" rel="alternate" type="text/html" title="VOSK: Test Drive" /><published>2020-10-25T00:00:00+03:00</published> <updated>2020-10-25T00:00:00+03:00</updated> <id>https://karz0n.github.io/posts/vosk-asr-testdrive/</id> <content src="https://karz0n.github.io/posts/vosk-asr-testdrive/" /> <author> <name>Denys Asauliak</name> </author> <category term="Engineering" /> <category term="ASR" /> <summary> Test drive will performed inside Ubuntu 18.04 docker container: $ docker run \ --name ubuntu \ --interactive \ --tty \ --user root:root \ --network=bridge \ ubuntu:18.04 /bin/bash First we need install VOSK and all prerequisites for it. General dependencies: $ apt update $ apt install -y build-essential git swig $ apt install -y automake autoconf unzip wget sox gfortran libtool subversion z... </summary> </entry> <entry><title>DeepSpeech: Test Drive</title><link href="https://karz0n.github.io/posts/deepspeech-testdrive/" rel="alternate" type="text/html" title="DeepSpeech: Test Drive" /><published>2020-10-25T00:00:00+03:00</published> <updated>2020-10-25T00:00:00+03:00</updated> <id>https://karz0n.github.io/posts/deepspeech-testdrive/</id> <content src="https://karz0n.github.io/posts/deepspeech-testdrive/" /> <author> <name>Denys Asauliak</name> </author> <category term="Engineering" /> <category term="ASR" /> <summary> Test drive will performed inside Ubuntu 18.04 docker container: $ docker run \ --name ubuntu \ --interactive \ --tty \ --user root:root \ --network=bridge \ ubuntu:18.04 /bin/bash First we need install DeepSpeech. General dependencies: $ apt update $ apt install -y wget python3 pytho3-pip Install DeepSpeech: $ pip3 install deepspeech Test drive: $ wget https://github.com/mozilla/DeepSpee... </summary> </entry> <entry><title>Setup network-wide ad-blocker based on RaspberryPi</title><link href="https://karz0n.github.io/posts/setup-network-wide-adblocker/" rel="alternate" type="text/html" title="Setup network-wide ad-blocker based on RaspberryPi" /><published>2020-09-06T00:00:00+03:00</published> <updated>2020-09-06T00:00:00+03:00</updated> <id>https://karz0n.github.io/posts/setup-network-wide-adblocker/</id> <content src="https://karz0n.github.io/posts/setup-network-wide-adblocker/" /> <author> <name>Denys Asauliak</name> </author> <category term="Engineering" /> <category term="RaspberryPi" /> <summary> Visit side and download Imager tools; Install Imager tool: $ sudo apt install ./imager_&amp;lt;version&amp;gt;_amd64.deb Run tool and write any RaspberryPi OS to the SD card; Plug-in SD card to RaspberryPi and log-in to the device; Configure device by raspi-config tool and restart; Log-in to the device, run installation and follow instructions: $ sudo curl -sSL https://inst... </summary> </entry> <entry><title>Set-Up Boost library</title><link href="https://karz0n.github.io/posts/setup-boost/" rel="alternate" type="text/html" title="Set-Up Boost library" /><published>2020-09-06T00:00:00+03:00</published> <updated>2020-09-06T00:00:00+03:00</updated> <id>https://karz0n.github.io/posts/setup-boost/</id> <content src="https://karz0n.github.io/posts/setup-boost/" /> <author> <name>Denys Asauliak</name> </author> <category term="Development" /> <category term="Bootstrap" /> <summary> Download and unpack: $ wget https://dl.bintray.com/boostorg/release/1.74.0/source/boost_1_74_0.tar.gz $ tar -xf boost_1_74_0.tar.gz &amp;amp;&amp;amp; rm boost_1_74_0.tar.gz $ cd boost_1_74_0 Build and install. With specific place: $ ./bootstrap.sh --prefix=${HOME}/opt/boost $ ./b2 install or to the default place: $ ./bootstrap.sh $ sudo ./b2 install Use by C... </summary> </entry> </feed>
